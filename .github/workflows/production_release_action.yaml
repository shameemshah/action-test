name: Production-Release
on:
  workflow_dispatch:
    inputs:
      ReleaseType:
        description: 'Release Type'
        required: true
        default: 'warning'
        type: choice
        options:
        - Major
        - Feature
        - Bug
      ReleaseNote:
        description: 'Release Note'
        required: true

jobs:
  TaggingAndRelease:
    runs-on: ubuntu-latest
    steps:
     - id: PreValidation 
       env:
        REPOSITORY: ${{ github.repository }}
       run: |
        BRANCH="${GITHUB_REF#refs/heads/}"
        if [ $BRANCH == 'main' ]
        then
          echo "Branch validation Successful "      
        else
          echo "Releases only taken from main branch"
          exit 1
        fi

        repo=$REPOSITORY
        echo $repo
        tag=$(curl -s "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/$repo/releases/latest" | jq -r '.tag_name')
        read type tag_sha < <(echo $(curl -s "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/$repo/git/ref/tags/$tag" | 
             jq -r '.object.type,.object.sha'))

        if [ $type == "commit" ]; then
            echo "commit sha: $tag_sha"
        else
            sha=$(curl -s "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/$repo/git/tags/$tag_sha" | jq '.object.sha')
            echo "commit sha: $sha"
        fi

     - id: releasetype
       uses: ASzc/change-string-case-action@v5
       with:
        string: ${{ inputs.ReleaseType }}
    
     - uses: actions/checkout@main
       with:
          fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags

     - name: 'Get Previous tag'
       id: previoustag
       uses: "WyriHaximus/github-action-get-previous-tag@v1"
       with:
        fallback: 0.0.1 # Optional fallback tag to use when no tag can be found
    
     - name: Bump release version
       id: bump_version
       uses: christian-draeger/increment-semantic-version@1.0.3
       with:
        current-version: ${{ steps.previoustag.outputs.tag }}
        version-fragment: ${{ steps.releasetype.outputs.lowercase }}

     - name: Get changed files
       id: changed-files
       uses: tj-actions/changed-files@v34

     - name: List all changed files
       run: |
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          echo "$file was changed"
        done

     - name: Release Details
       run: |
          echo "Release type ${{ inputs.ReleaseType }}" >> $GITHUB_STEP_SUMMARY
          echo V.${{ steps.bump_version.outputs.next-version }} >> $GITHUB_STEP_SUMMARY
     - name: push new version tag
       uses: actions/checkout@v3
     - run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ steps.bump_version.outputs.next-version }}
          git push origin ${{ steps.bump_version.outputs.next-version }}

     - name: "Create release"
       uses: "actions/github-script@v6"
       env: 
        RELEASE_TAG: ${{ steps.bump_version.outputs.next-version }}
        RELEASE_NAME: ${{ inputs.ReleaseType }} Release V. ${{ steps.bump_version.outputs.next-version }}
       with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.RELEASE_NAME,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
              });
            } catch (error) {
              core.setFailed(error.message);
            }
