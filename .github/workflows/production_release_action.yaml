name: Production-Release
on:
  workflow_dispatch:
    inputs:
      ReleaseType:
        description: 'Release Type'
        required: true
        default: 'warning'
        type: choice
        options:
        - Major
        - Feature
        - Bug

jobs:
  TaggingAndRelease:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      NEWVERSION: ${{ steps.bump_version.outputs.next-version }}
    steps:
     
     - uses: actions/checkout@main
       with:
          fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags

     - id: releasetype
       uses: ASzc/change-string-case-action@v5
       with:
        string: ${{ inputs.ReleaseType }}
    
     - name: 'Get Previous tag'
       id: previoustag
       uses: "WyriHaximus/github-action-get-previous-tag@v1"
       with:
        fallback: 0.0.1 # Optional fallback tag to use when no tag can be found
    
     - id: PreValidation 
       run: |
        BRANCH="${GITHUB_REF#refs/heads/}"
        if [ $BRANCH == 'main' ]
        then
          echo "Branch validation Successful "      
        else
          echo "Releases only taken from main branch :gun: " >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

        tag=${{ steps.previoustag.outputs.tag }}
        read type tag_sha < <(echo $(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/git/ref/tags/$tag" | 
             jq -r '.object.type,.object.sha'))

        if [ $type == "commit" ]; then
            echo "commit sha: $tag_sha"
        else
            sha=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/git/tags/$tag_sha" | jq '.object.sha')
        fi
        PreviousSha=${{ github.sha }}
        if [[ $tag_sha == $PreviousSha ]]
        then
          echo "Nothing changed from last release :banana:" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
    
     - name: Bump release version
       id: bump_version
       uses: christian-draeger/increment-semantic-version@1.0.3
       with:
        current-version: ${{ steps.previoustag.outputs.tag }}
        version-fragment: ${{ steps.releasetype.outputs.lowercase }}

     - name: Release Details
       run: |
          echo "Release type ${{ inputs.ReleaseType }}" >> $GITHUB_STEP_SUMMARY
          echo :rocket: v.${{ steps.bump_version.outputs.next-version }} >> $GITHUB_STEP_SUMMARY
     - name: push new version tag
       uses: actions/checkout@v3
     - run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ steps.bump_version.outputs.next-version }}
          git push origin ${{ steps.bump_version.outputs.next-version }}

     - name: Cancelling parallel jobs
       if: failure()
       uses: andymckay/cancel-action@0.3
 
  slack-notification:
       name: Slack Notification
       if: always()
       runs-on: ubuntu-latest
       needs:
         - TaggingAndRelease
       env:
         SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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
         NEWVERSION: ${{needs.TaggingAndRelease.outputs.NEWVERSION}}
       steps:
       - uses: technote-space/workflow-conclusion-action@v3
       - name: Update slack message body 
         id: body
         run: |
           if [ '${{ env.WORKFLOW_CONCLUSION }}' == 'success' ] 
           then
             echo "SLACK_MESSAGE=Version $NEWVERSION Taggged Successfully :white_check_mark:" >> $GITHUB_ENV
           elif [ '${{ env.WORKFLOW_CONCLUSION }}'  == 'failure' ] 
           then
             echo "SLACK_MESSAGE=Failed :x:"  >> $GITHUB_ENV
           elif [ '${{ env.WORKFLOW_CONCLUSION }}'  == 'cancelled' ] 
           then
             echo "SLACK_MESSAGE=Cancelled :grey_exclamation:" >> $GITHUB_ENV
           fi
       - name: Slack Notification
         uses: rtCamp/action-slack-notify@v2
         env:
           SLACK_COLOR: ${{ env.WORKFLOW_CONCLUSION }} # or a specific color like 'good' or '#ff00ff'
           SLACK_ICON: https://taxcryp.com/images/taxcryp_logo_new.png
           SLACK_MESSAGE: "${{ env.SLACK_MESSAGE }}"
           SLACK_TITLE: Build Status
           SLACK_FOOTER: '<${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>'
           SLACK_USERNAME: Shameem-test
           SLACK_WEBHOOK: ${{ secrets[env.SLACK_WEBHOOK_URL] }}
