           const { repo, owner } = context.repo;
            const target_commitish = '${{ github.ref_name }}';
            let version = target_commitish.replace('${{ env.RELEASE_BRANCH_PREFIX }}', '')
            core.setOutput("rc-version", `${version}rc${{ github.run_id }}`);
            
            const {data: releases} = await github.rest.repos.listReleases({
                owner,
                repo,
            });
            
            let release = releases.find((e) => {
                return target_commitish.endsWith(e.target_commitish) && e.draft
            })
            
            if (release) {
                console.log(`Draft release already exist ${release.html_url}`)
            } else {
                console.log(`Draft release is not found creating a new one`)
                const {data: tags} = await github.rest.repos.listTags({
                    owner,
                    repo,
                    per_page: 100
                });
                console.log(`Tags:`)
                console.log(tags.map(e => e.name))
                const matchedTags = tags.filter(e => e.name.indexOf(version) !== -1)
                console.log(`Tags for ${version}:`)
                console.log(matchedTags.map(e => e.name))
                if (matchedTags.length !== 0) {
                    let newHotfixNumber = 0
                    for (let matchedTag of matchedTags) {
                        const matchVersion = matchedTag.name.match('^[v]?([0-9]+)\.([0-9]+)\.([0-9]+)(.post([0-9]+))?$')
                        if (matchVersion && matchVersion[5]) {
                            const hotfixNumber = parseInt(matchVersion[5])
                            if (newHotfixNumber <= hotfixNumber) {
                                newHotfixNumber = hotfixNumber + 1
                            }
                        }
                    }
                    version = `${version}.post${newHotfixNumber}`
                }
                console.log(`New version: ${version}`)
                const {data: newDraftRelease} = await github.rest.repos.createRelease({
                    owner,
                    repo,
                    draft: true,
                    prerelease: false,
                    name: version,
                    tag_name: version,
                    target_commitish: target_commitish,
                    generate_release_notes: true,
                });
                console.log(`Draft release is created ${newDraftRelease.html_url}`)
                release = newDraftRelease;
                core.setOutput("created", true);
            }
            
            core.setOutput("id", release.id);
            core.setOutput("tag_name", release.tag_name);